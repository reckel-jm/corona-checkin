#!/usr/bin/env python3

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

import os
import sys
import zlib
import argparse
import logging
from typing import Dict, Tuple, Optional

import PIL.Image
import pyzbar.pyzbar

import json
import base45
import base64
import cbor2
from cose.headers import Algorithm, KID
from cose.messages import CoseMessage
from cose.keys import cosekey, ec2, keyops, keyparam, curves, keytype
from cose import algorithms

from cryptography import x509
from cryptography import hazmat
from pyasn1.codec.ber import decoder as asn1_decoder
from cryptojwt import jwk as cjwtk
from cryptojwt import utils as cjwt_utils
from pycountry import countries
from datetime import datetime

log = logging.getLogger(__name__)

DEFAULT_CERTIFICATE_DB_JSON = 'certs/roots/Digital_Green_Certificate_Signing_Keys.json'
DEFAULT_CERTIFICATE_DIRECTORY = 'certs'


def _setup_logger(use_debug: bool) -> None:
    log_formatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
    console_handler = logging.StreamHandler(sys.stderr)
    console_handler.setFormatter(log_formatter)
    console_handler.propagate = False
    log = logging.getLogger()
    log.addHandler(console_handler)
    if use_debug:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)


def find_key(key: KID, certs_dir: str, keys_file: str) -> Optional[cosekey.CoseKey]:
    key_id_str = key.hex()
    pem_filename = "{}/{}.pem".format(certs_dir, key_id_str)
    log.debug("Check if certificate {} exists.".format(pem_filename))
    if os.path.exists(pem_filename):
        with open(pem_filename, "rb") as pem_file:
            lines = pem_file.read()
        cert = x509.load_pem_x509_certificate(lines)
        try:
            subject = cert.subject
        except ValueError:
            subject = None
        if subject:
            subject_parts = []
            for subject_compo in subject:
                subject_parts.append("{} = {}".format(subject_compo.oid._name, subject_compo.value))
            log.debug("Certificate subject: {}".format(', '.join(subject_parts)))
        else:
            log.debug("Certificate has no subject")
        log.info("Using X.509 certificate {}".format(pem_filename))
        cose_key = _cert_to_cose_key(cert, key)
    elif os.path.exists(keys_file):
        # Read the JSON-database of all known keys
        with open(keys_file, encoding='utf-8') as f:
            known_keys = json.load(f)

        cose_key = None
        for key_id, key_data in known_keys.items():
            key_id_binary = base64.b64decode(key_id)
            if key_id_binary == key:
                log.info("Found the raw key from DB-file {}!".format(keys_file))
                # pprint(key_data)
                # check if the point is uncompressed rather than compressed
                x, y = public_ec_key_points(base64.b64decode(key_data['publicKeyPem']))
                key_dict = {'crv': key_data['publicKeyAlgorithm']['namedCurve'],  # 'P-256'
                            'kid': key_id_binary.hex(),
                            'kty': key_data['publicKeyAlgorithm']['name'][:2],  # 'EC'
                            'x': x,  # 'eIBWXSaUgLcxfjhChSkV_TwNNIhddCs2Rlo3tdD671I'
                            'y': y,  # 'R1XB4U5j_IxRgIOTBUJ7exgz0bhen4adlbHkrktojjo'
                            }
                cose_key = cosekey_from_jwk_dict(key_dict)
                break

        if not cose_key:
            return None
    else:
        log.warning("Cannot find PEM-certificates directory nor keys JSON-file! Failed to locate signature key.")
        return None
    if cose_key.kid.decode() != key.hex():
        raise RuntimeError("Internal: No key for {0}!".format(key.hex()))

    return cose_key


def _cert_to_cose_key(cert: x509.Certificate, key_id: KID = None) -> cosekey.CoseKey:
    public_key = cert.public_key()
    key_dict = None

    if isinstance(public_key, hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey):
        curve_name = public_key.curve.name
        matching_curve = None
        for name in dir(curves):
            if name.startswith('_'):
                continue
            if curve_name.lower() == name.lower():
                if name == 'SECP256R1':
                    matching_curve = curves.P256
                elif name == 'SECP384R1':
                    matching_curve = curves.P384
                else:
                    raise RuntimeError("Unknown curve {}!".format(curve_name))
                break

        if not matching_curve:
            raise RuntimeError("Could not find curve {} used in X.509 certificate from COSE!".format(curve_name))

        public_numbers = public_key.public_numbers()
        size_bytes = public_key.curve.key_size // 8
        x = public_numbers.x.to_bytes(size_bytes, byteorder="big")
        y = public_numbers.y.to_bytes(size_bytes, byteorder="big")
        key_dict = {
            keyparam.KpKeyOps: [keyops.VerifyOp],
            keyparam.KpKty: keytype.KtyEC2,
            keyparam.EC2KpCurve: matching_curve,
            keyparam.KpAlg: algorithms.Es256,
            keyparam.EC2KpX: x,
            keyparam.EC2KpY: y,
            keyparam.KpKid: bytes(key_id.hex(), "ASCII")
        }
    else:
        raise RuntimeError("Cannot handle RSA-keys!")

    key = cosekey.CoseKey.from_dict(key_dict)

    return key


def public_ec_key_points(public_key: bytes) -> Tuple[str, str]:
    # This code adapted from: https://stackoverflow.com/a/59537764/1548275
    public_key_asn1, _remainder = asn1_decoder.decode(public_key)
    public_key_bytes = public_key_asn1[1].asOctets()

    off = 0
    if public_key_bytes[off] != 0x04:
        raise ValueError("EC public key is not an uncompressed point")
    off += 1

    size_bytes = (len(public_key_bytes) - 1) // 2

    x_bin = public_key_bytes[off:off + size_bytes]
    x = int.from_bytes(x_bin, 'big', signed=False)
    off += size_bytes

    y_bin = public_key_bytes[off:off + size_bytes]
    y = int.from_bytes(y_bin, 'big', signed=False)
    off += size_bytes

    bl = (x.bit_length() + 7) // 8
    bytes_val = x.to_bytes(bl, 'big')
    x_str = base64.b64encode(bytes_val, altchars='-_'.encode()).decode()

    bl = (y.bit_length() + 7) // 8
    bytes_val = y.to_bytes(bl, 'big')
    y_str = base64.b64encode(bytes_val, altchars='-_'.encode()).decode()

    return x_str, y_str


# Create CoseKey from JWK
def cosekey_from_jwk_dict(jwk_dict: Dict) -> cosekey.CoseKey:
    # Read key and return CoseKey
    if jwk_dict["kty"] != "EC":
        raise ValueError("Only EC keys supported")
    if jwk_dict["crv"] != "P-256":
        raise ValueError("Only P-256 supported")

    key = ec2.EC2(
        crv=curves.P256,
        x=cjwt_utils.b64d(jwk_dict["x"].encode()),
        y=cjwt_utils.b64d(jwk_dict["y"].encode()),
    )
    key.key_ops = [keyops.VerifyOp]
    if "kid" in jwk_dict:
        key.kid = bytes(jwk_dict["kid"], "UTF-8")

    return key


# Create JWK and valculate KID from Public Signing Certificate
def read_cosekey_from_pem_file(cert_file: str) -> cosekey.CoseKey:
    # Read certificate, calculate kid and return EC CoseKey
    if not cert_file.endswith(".pem"):
        raise ValueError("Unknown key format. Use .pem keyfile")

    with open(cert_file, 'rb') as f:
        cert_data = f.read()
        # Calculate Hash from the DER format of the Certificate
        cert = x509.load_pem_x509_certificate(cert_data, hazmat.backends.default_backend())
        keyidentifier = cert.fingerprint(hazmat.primitives.hashes.SHA256())
    f.close()
    key = cert.public_key()

    jwk = cjwtk.ec.ECKey()
    jwk.load_key(key)
    # Use first 8 bytes of the hash as Key Identifier (Hex as UTF-8)
    jwk.kid = keyidentifier[:8].hex()
    jwk_dict = jwk.serialize(private=False)

    return cosekey_from_jwk_dict(jwk_dict)


def verify_signature(cose_msg: CoseMessage, key: cosekey.CoseKey) -> bool:
    cose_msg.key = key
    if not cose_msg.verify_signature():
        log.warning("Signature does not verify with key ID {0}!".format(key.kid.decode()))
        return False

    log.info("Signature verified ok")

    return cose_msg.verify_signature()


def get_covid_cert_data(cert: str, certs_dir: str, keys_file: str) -> dict:
    # Code adapted from:
    # https://alphalist.com/blog/the-use-of-blockchain-for-verification-eu-vaccines-passport-program-and-more

    # Strip the first characters to form valid Base45-encoded data
    b45data = cert[4:]

    # Decode the data
    zlibdata = base45.b45decode(b45data)

    # Uncompress the data
    decompressed = zlib.decompress(zlibdata)

    # decode COSE message (no signature verification done)
    cose_msg = CoseMessage.decode(decompressed)
    # pprint.pprint(cose_msg)

    # decode the CBOR encoded payload and print as json
    pkid, ukid = cose_msg.phdr.get(KID), cose_msg.uhdr.get(KID)
    if not pkid and not ukid:
        log.info("Certificate is not signed")
    else:
        if (pkid and ukid) and (pkid != ukid):
            log.info("Both protected and unprotected headers contain differing key references, "
                     "defaulting to the protected one")
        elif ukid and not pkid:
            log.info("Protected header key reference missing, using the unprotected one")
        kid = pkid or ukid
        log.info("COVID certificate signed with X.509 certificate.")
        log.info("X.509 in DER form has SHA-256 beginning with: {0}".format(kid.hex()))
        key = find_key(kid, certs_dir, keys_file)
        if key:
            verify_signature(cose_msg, key)
        else:
            log.info("Skip verify as no key found from database")
    # log.debug(cose_msg.uhdr)
    # log.debug(cose_msg.key)
    cbor = cbor2.loads(cose_msg.payload)

    return cbor


def output_covid_cert_data(cert: dict, human_readable_output: bool, output_json_file: str = None) -> None:
    # Note: Some countries have hour:minute:secod for sc-field (Date/Time of Sample Collection).
    # If used, this will decode as a datetime. A datetime cannot be JSON-serialized without hints (use str as default).
    # Note 2: Names may contain non-ASCII characters in UTF-8

    if human_readable_output:
        # CWT structure payload: https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_v1_en.pdf
        # 1: issuer, ISO 3166-1 alpha-2
        # 4: expiry, RFC 8392 section 2, numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC
        # 6: issued, RFC 8392 section 2
        # -260: Health certificate
        issuer = 'unknown'
        if 1 in cert:
            # This field is optional
            issuer_country = countries.get(alpha_2=cert[1])
            if issuer_country is None:
                issuer = cert[1]
            else:
                issuer = issuer_country.name

        # Health certificate Schema: https://github.com/ehn-dcc-development/ehn-dcc-schema/blob/release/1.3.0/DCC.schema.json
        # v = Vaccination
        # t = Test
        # r = Recovery

        # Diseases covered in schema:
        diseases = {
            "840539006": "COVID-19",
        }
        # Vaccines covered in schema:
        # Value set: https://github.com/ehn-dcc-development/ehn-dcc-schema/blob/release/1.3.0/valuesets/vaccine-prophylaxis.json
        vaccine_types = {
            "1119349007": "SARS-CoV-2 mRNA vaccine",
            "1119305005": "SARS-CoV-2 antigen vaccine",
            "J07BX03": "COVID-19 vaccines",
        }
        # Value set: https://github.com/ehn-dcc-development/ehn-dcc-schema/blob/release/1.3.0/valuesets/vaccine-medicinal-product.json
        vaccine_products = {
            "EU/1/20/1528": "EU/1/20/1528: Comirnaty",
            "EU/1/20/1507": "EU/1/20/1507: COVID-19 Vaccine Moderna",
            "EU/1/21/1529": "EU/1/21/1529: Vaxzevria",
            "EU/1/20/1525": "EU/1/20/1525: COVID-19 Vaccine Janssen",
            "CVnCoV": "CVnCoV",
            "Sputnik-V": "Sputnik-V",
            "Convidecia": "Convidecia",
            "EpiVacCorona": "EpiVacCorona",
            "BBIBP-CorV": "BBIBP-CorV",
            "Inactivated-SARS-CoV-2-Vero-Cell": "Inactivated-SARS-CoV-2-Vero-Cell",
            "CoronaVac": "CoronaVac",
            "Covaxin": "Covaxin (aka. BBV152 A, B, C)",
        }
        # Value set: https://github.com/ehn-dcc-development/ehn-dcc-schema/blob/release/1.3.0/valuesets/vaccine-mah-manf.json
        vaccine_manufacturers = {
            "ORG-100001699": "AstraZeneca AB",
            "ORG-100030215": "Biontech Manufacturing GmbH",
            "ORG-100001417": "Janssen-Cilag International",
            "ORG-100031184": "Moderna Biotech Spain S.L.",
            "ORG-100006270": "Curevac AG",
            "ORG-100013793": "CanSino Biologics",
            "ORG-100020693": "China Sinopharm International Corp. - Beijing location",
            "ORG-100010771": "Sinopharm Weiqida Europe Pharmaceutical s.r.o. - Prague location",
            "ORG-100024420": "Sinopharm Zhijun (Shenzhen) Pharmaceutical Co. Ltd. - Shenzhen location",
            "ORG-100032020": "Novavax CZ AS",
            "Gamaleya-Research-Institute": "Gamaleya Research Institute",
            "Vector-Institute": "Vector Institute",
            "Sinovac-Biotech": "Sinovac Biotech",
            "Bharat-Biotech": "Bharat Biotech",
        }
        # Test results covered in schema:
        test_results = {
            "260415000": "Not detected",
            "260373001": "Detected",
        }
        # Test types covered in schema:
        test_types = {
            "LP6464-4": "LP6464-4: Nucleic acid amplification with probe detection",
            "LP217198-3": "LP217198-3: Rapid immunoassay",
        }

        health_cert = {
        }
        health_cert_data_in = cert[-260][1]
        for key in health_cert_data_in:
            if key == "v":
                health_cert["Vaccination"] = []
                for item_nro, item in enumerate(health_cert_data_in[key]):
                    data_out = {}
                    for item_key in item.keys():
                        if item_key == "tg":
                            data_out["Targeted disease or agent"] = diseases[item[item_key]]
                        elif item_key == "vp":
                            data_out["Vaccine or prophylaxis"] = vaccine_types[item[item_key]]
                        elif item_key == "mp":
                            data_out["Medicinal product"] = vaccine_products[item[item_key]]
                        elif item_key == "ma":
                            data_out["Marketing Authorization Holder / Manufacturer"] = vaccine_manufacturers[
                                item[item_key]]
                        elif item_key == "dn":
                            data_out["Dose Number"] = item[item_key]
                        elif item_key == "sd":
                            data_out["Total Series of Doses"] = item[item_key]
                        elif item_key == "dt":
                            data_out["Date of Vaccination"] = item[item_key]
                        elif item_key == "co":
                            data_out["Country of Vaccination"] = countries.get(alpha_2=item[item_key]).name
                        elif item_key == "is":
                            data_out["Certificate Issuer"] = item[item_key]
                        elif item_key == "ci":
                            data_out["Unique Certificate Identifier: UVCI"] = item[item_key]
                        else:
                            data_out[item_key] = item[item_key]
                    health_cert["Vaccination"].append(data_out)
            elif key == "t":
                health_cert["Test"] = []
                for item_nro, item in enumerate(health_cert_data_in[key]):
                    data_out = {}
                    for item_key in item.keys():
                        if item_key == "tg":
                            data_out["Targeted disease or agent"] = diseases[item[item_key]]
                        elif item_key == "tt":
                            data_out["Type of Test"] = test_types[item[item_key]]
                        elif item_key == "nm":
                            data_out["NAA Test Name"] = item[item_key]
                        elif item_key == "ma":
                            data_out["RAT Test name and manufacturer"] = item[item_key]
                        elif item_key == "sc":
                            data_out["Date/Time of Sample Collection"] = item[item_key]
                        elif item_key == "tr":
                            data_out["Test Result"] = test_results[item[item_key]]
                        elif item_key == "tc":
                            data_out["Testing Centre"] = item[item_key]
                        elif item_key == "co":
                            data_out["Country of Test"] = countries.get(alpha_2=item[item_key]).name
                        elif item_key == "is":
                            data_out["Certificate Issuer"] = item[item_key]
                        elif item_key == "ci":
                            data_out["Unique Certificate Identifier: UVCI"] = item[item_key]
                        else:
                            data_out[item_key] = item[item_key]
                    health_cert["Test"].append(data_out)
            elif key == "r":
                health_cert["Recovery"] = []
                for item_nro, item in enumerate(health_cert_data_in[key]):
                    data_out = {}
                    for item_key in item.keys():
                        if item_key == "tg":
                            data_out["Targeted disease or agent"] = diseases[item[item_key]]
                        elif item_key == "fr":
                            data_out["First positive NAA test result"] = item[item_key]
                        elif item_key == "co":
                            data_out["Country of Test"] = countries.get(alpha_2=item[item_key]).name
                        elif item_key == "is":
                            data_out["Certificate Issuer"] = item[item_key]
                        elif item_key == "df":
                            data_out["Certificate Valid From"] = item[item_key]
                        elif item_key == "du":
                            data_out["Certificate Valid Until"] = item[item_key]
                        elif item_key == "ci":
                            data_out["Unique Certificate Identifier: UVCI"] = item[item_key]
                        else:
                            data_out[item_key] = item[item_key]
                    health_cert["Recovery"].append(data_out)
            elif key == "dob":
                health_cert["Date of birth"] = health_cert_data_in[key]
            elif key == "nam":
                health_cert["Name"] = {}
                for name_key in health_cert_data_in[key]:
                    if name_key == "gn":
                        health_cert["Name"]["Forename"] = health_cert_data_in[key][name_key]
                    elif name_key == "gnt":
                        health_cert["Name"]["ICAO 9303 standardised forename"] = health_cert_data_in[key][name_key]
                    elif name_key == "fn":
                        health_cert["Name"]["Surname"] = health_cert_data_in[key][name_key]
                    elif name_key == "fnt":
                        health_cert["Name"]["ICAO 9303 standardised surname"] = health_cert_data_in[key][name_key]
                    else:
                        health_cert["Name"][name_key] = health_cert_data_in[key][name_key]
            elif key == "ver":
                health_cert["Version"] = health_cert_data_in[key]
            else:
                health_cert[key] = health_cert_data_in[key]

        cert_to_output = {
            "issuer": issuer,
            "expiry:": datetime.utcfromtimestamp(cert[4]).strftime('%Y-%m-%d %H:%M:%S'),
            "issued:": datetime.utcfromtimestamp(cert[6]).strftime('%Y-%m-%d %H:%M:%S'),
            "Health certificate": {
                "1": health_cert
            }
        }
    else:
        cert_to_output = cert
    log.info("Certificate as JSON: {0}".format(json.dumps(cert_to_output, indent=2, default=str, ensure_ascii=False)))

    # Output?
    if output_json_file:
        with open(output_json_file, "w") as json_out:
            json.dump(cert_to_output, json_out, indent=2, default=str, ensure_ascii=False)
        log.info("Wrote certificate into {}".format(output_json_file))


def main() -> None:
    parser = argparse.ArgumentParser(description='EU Digital COVID Certificate Verifier/Outputter')
    parser.add_argument('--image-file', metavar="IMAGE-FILE",
                        help='Image to read QR-code from')
    parser.add_argument('--raw-string', '--raw-data', metavar="RAW-STRING",
                        help='Contents of the QR-code as string. Alternatively a file with raw string in it.')
    parser.add_argument('image_file_positional', metavar="IMAGE-FILE", nargs="?",
                        help='Image to read QR-code from')
    parser.add_argument('--certificates-directory', default=DEFAULT_CERTIFICATE_DIRECTORY,
                        help="Signature X.509 PEM certificates dir. Default: {0}".format(DEFAULT_CERTIFICATE_DIRECTORY))
    parser.add_argument('--certificate-db-json-file', default=DEFAULT_CERTIFICATE_DB_JSON,
                        help="Signature certificate JSON-file. Default: {0}".format(DEFAULT_CERTIFICATE_DB_JSON))
    parser.add_argument('--output-json-file',
                        help="Output resulting data as JSON.")
    #    parser.add_argument('--output-human-readable', default=True,
    #                        help="Output resulting JSON as human-readable instead of raw data.")
    parser.add_argument('--output-human-readable', action='store_const',
                        default=True, const=True,
                        dest='output_human_readable',
                        help="Output resulting JSON as human-readable instead of raw data. Default.")
    parser.add_argument('--output-raw-json', action='store_const',
                        const=False,
                        dest='output_human_readable',
                        help="Output resulting JSON as raw data.")
    parser.add_argument('--debug', action="store_true", default=False,
                        help="Make logging use DEBUG instead of default INFO.")

    args = parser.parse_args()
    _setup_logger(args.debug)

    covid_cert_data = None
    image_file = None
    if args.image_file_positional:
        image_file = args.image_file_positional
    elif args.image_file:
        image_file = args.image_file

    if image_file:
        data = pyzbar.pyzbar.decode(PIL.Image.open(image_file))
        if len(data) == 0:
            log.error("QR-not found! Cannot continue.")
            exit(1)
        covid_cert_data = data[0].data.decode()
        log.debug("QR-code has: {}".format(covid_cert_data))
    elif args.raw_string:
        if os.path.exists(args.raw_string):
            with open(args.raw_string, "r") as covid_file:
                covid_cert_data = covid_file.readline()
            if not covid_cert_data.startswith("HC1:"):
                log.error("File {} doesn't contain EU COVID passport data!")
                exit(1)
        else:
            covid_cert_data = args.raw_string
    else:
        log.error("Input parameters: Need either --image-file or --raw-string QR-code content.")
        exit(2)

    # Got the data, output
    log.debug("Cert data: '{0}'".format(covid_cert_data))
    cert = get_covid_cert_data(covid_cert_data,
                               args.certificates_directory,
                               args.certificate_db_json_file)
    output_covid_cert_data(cert, args.output_human_readable,
                           args.output_json_file)


if __name__ == '__main__':
    main()
